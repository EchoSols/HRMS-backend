// This is your Prisma schema file for the user-service
// It focuses on user profiles, preferences, relationships, and analytics

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PR_DATABASE_URL")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_ACTIVATION
  DEACTIVATED
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
  TEAM_ONLY
  MANAGER_ONLY
}

enum NotificationPreference {
  EMAIL
  SMS
  PUSH
  IN_APP
  NONE
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PREFERENCE_CHANGE
  FEATURE_ACCESS
  DOCUMENT_VIEW
  REPORT_GENERATED
  SETTING_CHANGED
}

// User Profile Model - Extended user information
model UserProfile {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @unique @map("user_id") @db.Uuid // References auth-service users table
  companyId             String    @map("company_id") @db.Uuid // References auth-service companies table
  
  // Personal Information
  profilePicture        String?   @map("profile_picture") @db.VarChar(500)
  bio                   String?   @db.Text
  location              String?   @db.VarChar(100)
  timezone              String?   @db.VarChar(50)
  language              String?   @db.VarChar(10) @default("en")
  dateOfBirth          DateTime? @map("date_of_birth") @db.Date
  gender                String?   @db.VarChar(20)
  maritalStatus         String?   @map("marital_status") @db.VarChar(20)
  nationality           String?   @db.VarChar(100)
  
  // Contact Information
  phone                 String?   @db.VarChar(20)
  mobile                String?   @db.VarChar(20)
  emergencyContact      Json?     @map("emergency_contact") @db.JsonB
  address               Json?     @db.JsonB
  
  // Professional Information
  employeeId            String?   @map("employee_id") @db.VarChar(50)
  jobTitle              String?   @map("job_title") @db.VarChar(100)
  department            String?   @db.VarChar(100)
  managerId             String?   @map("manager_id") @db.Uuid
  hireDate              DateTime? @map("hire_date") @db.Date
  employmentType        String?   @map("employment_type") @db.VarChar(50)
  
  // Profile Settings
  visibility            ProfileVisibility @default(TEAM_ONLY)
  status                UserStatus @default(ACTIVE)
  lastActive            DateTime? @map("last_active") @db.Timestamp(6)
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime? @map("deleted_at") @db.Timestamp(6)
  
  // Relations
  preferences           UserPreference[]
  relationships         UserRelationship[]
  activities           UserActivity[]
  loginHistory         LoginHistory[]
  featureUsage         FeatureUsage[]
  
  // Indexes
  @@index([companyId])
  @@index([status])
  @@index([managerId])
  @@index([department])
  @@index([lastActive])
  
  @@map("user_profiles")
}

// User Preferences Model
model UserPreference {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // UI Preferences
  theme                 String?   @db.VarChar(20) @default("light")
  colorScheme           String?   @map("color_scheme") @db.VarChar(20)
  fontSize              String?   @map("font_size") @db.VarChar(20) @default("medium")
  layout                String?   @db.VarChar(20) @default("default")
  
  // Notification Preferences
  emailNotifications    Boolean   @default(true) @map("email_notifications")
  smsNotifications      Boolean   @default(false) @map("sms_notifications")
  pushNotifications     Boolean   @default(true) @map("push_notifications")
  inAppNotifications    Boolean   @default(true) @map("in_app_notifications")
  
  // Feature Preferences
  dashboardLayout       Json?     @map("dashboard_layout") @db.JsonB
  quickActions          Json?     @map("quick_actions") @db.JsonB
  shortcuts             Json?     @map("shortcuts") @db.JsonB
  
  // Privacy Preferences
  profileVisibility     ProfileVisibility @default(TEAM_ONLY) @map("profile_visibility")
  activitySharing       Boolean   @default(true) @map("activity_sharing")
  dataExport            Boolean   @default(false) @map("data_export")
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  // Relations
  user                  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, companyId])
  @@index([companyId])
  
  @@map("user_preferences")
}

// User Relationships Model
model UserRelationship {
  id                    String    @id @default(uuid()) @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // Relationship Details
  userId                String    @map("user_id") @db.Uuid
  relatedUserId         String    @map("related_user_id") @db.Uuid
  relationshipType      String    @map("relationship_type") @db.VarChar(50) // manager, peer, mentor, mentee, etc.
  
  // Relationship Metadata
  startDate             DateTime? @map("start_date") @db.Date
  endDate               DateTime? @map("end_date") @db.Date
  isActive              Boolean   @default(true) @map("is_active")
  
  // Additional Info
  notes                 String?   @db.Text
  strength              String?   @db.VarChar(20) // strong, moderate, weak
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  // Relations
  user                  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, relatedUserId, relationshipType])
  @@index([companyId])
  @@index([relationshipType])
  @@index([isActive])
  
  @@map("user_relationships")
}

// User Activity Tracking Model
model UserActivity {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // Activity Details
  activityType          ActivityType @map("activity_type")
  description           String?   @db.Text
  metadata              Json?     @db.JsonB
  
  // Context
  ipAddress             String?   @map("ip_address") @db.VarChar(45)
  userAgent             String?   @map("user_agent") @db.Text
  deviceInfo            Json?     @map("device_info") @db.JsonB
  location              Json?     @map("location") @db.JsonB
  
  // Timestamps
  activityTime          DateTime  @map("activity_time") @db.Timestamp(6)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  
  // Relations
  user                  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([companyId])
  @@index([activityType])
  @@index([activityTime])
  @@index([userId, activityTime])
  
  @@map("user_activities")
}

// Login History Model
model LoginHistory {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // Login Details
  loginTime             DateTime  @map("login_time") @db.Timestamp(6)
  logoutTime            DateTime? @map("logout_time") @db.Timestamp(6)
  sessionDuration       Integer?  @map("session_duration") // in seconds
  
  // Login Context
  ipAddress             String?   @map("ip_address") @db.VarChar(45)
  userAgent             String?   @map("user_agent") @db.Text
  deviceInfo            Json?     @map("device_info") @db.JsonB
  location              Json?     @map("location") @db.JsonB
  
  // Status
  isSuccessful          Boolean   @default(true) @map("is_successful")
  failureReason         String?   @map("failure_reason") @db.Text
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  
  // Relations
  user                  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([companyId])
  @@index([loginTime])
  @@index([userId, loginTime])
  @@index([isSuccessful])
  
  @@map("login_history")
}

// Feature Usage Analytics Model
model FeatureUsage {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // Feature Details
  featureName           String    @map("feature_name") @db.VarChar(100)
  featureModule         String?   @map("feature_module") @db.VarChar(100)
  action                String?   @db.VarChar(50) // view, create, update, delete, etc.
  
  // Usage Metrics
  usageCount            Integer   @default(1) @map("usage_count")
  lastUsed              DateTime  @map("last_used") @db.Timestamp(6)
  totalTimeSpent        Integer?  @map("total_time_spent") // in seconds
  
  // Context
  sessionId             String?   @map("session_id") @db.Uuid
  metadata              Json?     @db.JsonB
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  // Relations
  user                  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, featureName, featureModule])
  @@index([companyId])
  @@index([featureName])
  @@index([lastUsed])
  @@index([userId, featureName])
  
  @@map("feature_usage")
}

// User Teams and Groups Model
model UserTeam {
  id                    String    @id @default(uuid()) @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // Team Details
  name                  String    @db.VarChar(100)
  description           String?   @db.Text
  teamType              String    @map("team_type") @db.VarChar(50) // project, department, cross-functional, etc.
  
  // Team Structure
  leadId                String?   @map("lead_id") @db.Uuid
  parentTeamId          String?   @map("parent_team_id") @db.Uuid
  
  // Team Settings
  isActive              Boolean   @default(true) @map("is_active")
  maxMembers            Integer?  @map("max_members")
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  // Self-referencing for hierarchy
  parentTeam            UserTeam? @relation("TeamHierarchy", fields: [parentTeamId], references: [id])
  subTeams              UserTeam[] @relation("TeamHierarchy")
  
  // Indexes
  @@index([companyId])
  @@index([teamType])
  @@index([leadId])
  @@index([parentTeamId])
  
  @@map("user_teams")
}

// User Team Members Model
model UserTeamMember {
  id                    String    @id @default(uuid()) @db.Uuid
  teamId                String    @map("team_id") @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  companyId             String    @map("company_id") @db.Uuid
  
  // Membership Details
  role                  String    @db.VarChar(50) // member, lead, contributor, observer
  joinDate              DateTime  @map("join_date") @db.Date
  leaveDate             DateTime? @map("leave_date") @db.Date
  isActive              Boolean   @default(true) @map("is_active")
  
  // Permissions
  canInvite             Boolean   @default(false) @map("can_invite")
  canManage             Boolean   @default(false) @map("can_manage")
  canViewAll            Boolean   @default(true) @map("can_view_all")
  
  // System Fields
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  // Constraints
  @@unique([teamId, userId])
  @@index([companyId])
  @@index([teamId])
  @@index([userId])
  @@index([isActive])
  
  @@map("user_team_members")
}
